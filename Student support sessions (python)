import numpy

# insertion_sort:
def insertion_sort(n, test_scores):
    print(f"starting list: {test_scores}")
    print("")  # whitespace)
    for i in range(1, n):
        print(f"sorting: {test_scores}")
        print("")  # whitespace
        current = test_scores[i]
        i2 = i
        while i2 > 0 and test_scores[i2 - 1] > current:
            test_scores[i2] = test_scores[i2 - 1]
            i2 = i2 - 1
            test_scores[i2] = current
    return test_scores


# binary_search:
def binary_search(first, last, items_user, test_scores):
    found = False
    while first <= last and not found:
        midpoint_test_scores = (first + last) // 2
        if test_scores[midpoint_test_scores] == items_user:
            found = True
            return midpoint_test_scores
        elif test_scores[midpoint_test_scores] < items_user:
            first = midpoint_test_scores + 1
        else:
            last = midpoint_test_scores - 1
    return -1


# statstics:
test_scores = [
    52,
    43,
    45,
    23,
    18,
    21,
    21,
    20,
    36,
    71,
    57,
    96,
    46,
    27,
    17,
    19,
    44,
    12,
    8,
    9,
    4,
]
# ---- declaration of n:
n = len(test_scores)
# --- numerical_statstics:
mean_score = int(numpy.mean(test_scores))
std_dev = int(numpy.std(test_scores))


# main_program:

temp_insertion_sort = insertion_sort(n, test_scores)
print(f"sorted list: {temp_insertion_sort}")
print("")  # whitespace
# --- user_inputs:
items_user = int(input("enter a score to search for: "))
print("")  # whitespace

index = binary_search(0, n - 1, items_user, test_scores)

# selection_logic:
if index != -1:
    print(f"{items_user} found at index: {index}")
else:
    print(f"{items_user} not within given list ENTER to exit.")

# --- dsplaying_statistics:
print(f"mean: {mean_score}")
print(f"standard dev: {std_dev}")

# --- support_verdict:
if items_user > mean_score + std_dev:
    print(f"score of {items_user}, warrants a top student.")
    print("{ENTER} to exit")

elif items_user > mean_score:
    print(f"score of{items_user}, is above average no need for support.")
    print("{ENTER} to exit")

elif items_user < mean_score - std_dev:
    print(
        f"score: {items_user} student is in desperate need of support, saturday sessions required."
    )
    print("{ENTER} to exit")
else:
    print(f"score: {items_user} below average, support classes needed.")
    print("{ENTER} to exit.")
